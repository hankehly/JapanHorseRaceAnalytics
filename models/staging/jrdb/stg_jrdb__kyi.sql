with
  source as (
  select
    *
  from
    {{ source('jrdb', 'raw_jrdb__kyi') }}
  ),
  final as (
  select
    {{ dbt_utils.generate_surrogate_key([
      "`レースキー_場コード`",
      "`レースキー_年`",
      "`レースキー_回`",
      "`レースキー_日`",
      "`レースキー_Ｒ`",
      "`馬番`"
    ]) }} as kyi_sk,
    concat(
      `レースキー_場コード`,
      `レースキー_年`,
      `レースキー_回`,
      `レースキー_日`,
      `レースキー_Ｒ`
    ) as `レースキー`,
    nullif(trim(`レースキー_場コード`), '') as `レースキー_場コード`,
    nullif(trim(`レースキー_年`), '') as `レースキー_年`,
    nullif(trim(`レースキー_回`), '') as `レースキー_回`,
    nullif(trim(`レースキー_日`), '') as `レースキー_日`,
    nullif(trim(`レースキー_Ｒ`), '') as `レースキー_Ｒ`,
    nullif(trim(`馬番`), '') as `馬番`,
    nullif(trim(`血統登録番号`), '') as `血統登録番号`,
    nullif(trim(`馬名`), '') as `馬名`,
    cast(nullif(trim(`ＩＤＭ`), '') as double) as `ＩＤＭ`,
    cast(nullif(trim(`騎手指数`), '') as double) as `騎手指数`,
    cast(nullif(trim(`情報指数`), '') as double) as `情報指数`,
    cast(nullif(trim(`総合指数`), '') as double) as `総合指数`,
    nullif(trim(`脚質`), '') as `脚質`,
    nullif(trim(`距離適性`), '') as `距離適性`,
    nullif(trim(`上昇度`), '') as `上昇度`,
    cast(nullif(trim(`ローテーション`), '') as integer) as `ローテーション`,
    cast(nullif(trim(`基準オッズ`), '') as double) as `基準オッズ`,
    cast(nullif(trim(`基準人気順位`), '') as integer) as `基準人気順位`,
    cast(nullif(trim(`基準複勝オッズ`), '') as double) as `基準複勝オッズ`,
    cast(nullif(trim(`基準複勝人気順位`), '') as integer) as `基準複勝人気順位`,
    coalesce(cast(nullif(trim(`特定情報◎`), '') as integer), 0) as `特定情報◎`,
    coalesce(cast(nullif(trim(`特定情報○`), '') as integer), 0) as `特定情報○`,
    coalesce(cast(nullif(trim(`特定情報▲`), '') as integer), 0) as `特定情報▲`,
    coalesce(cast(nullif(trim(`特定情報△`), '') as integer), 0) as `特定情報△`,
    coalesce(cast(nullif(trim(`特定情報×`), '') as integer), 0) as `特定情報×`,
    coalesce(cast(nullif(trim(`総合情報◎`), '') as integer), 0) as `総合情報◎`,
    coalesce(cast(nullif(trim(`総合情報○`), '') as integer), 0) as `総合情報○`,
    coalesce(cast(nullif(trim(`総合情報▲`), '') as integer), 0) as `総合情報▲`,
    coalesce(cast(nullif(trim(`総合情報△`), '') as integer), 0) as `総合情報△`,
    coalesce(cast(nullif(trim(`総合情報×`), '') as integer), 0) as `総合情報×`,
    cast(nullif(trim(`人気指数`), '') as integer) as `人気指数`,
    coalesce(cast(nullif(trim(`調教指数`), '') as double), 0) as `調教指数`,
    cast(nullif(trim(`厩舎指数`), '') as double) as `厩舎指数`,
    nullif(trim(`調教矢印コード`), '') as `調教矢印コード`,
    nullif(trim(`厩舎評価コード`), '') as `厩舎評価コード`,
    cast(nullif(trim(`騎手期待連対率`), '') as double) as `騎手期待連対率`,
    cast(nullif(trim(`激走指数`), '') as integer) as `激走指数`,
    nullif(trim(`蹄コード`), '') as `蹄コード`,
    nullif(trim(`重適性コード`), '') as `重適性コード`,
    nullif(trim(`クラスコード`), '') as `クラスコード`,
    nullif(trim(`ブリンカー`), '') as `ブリンカー`,
    nullif(trim(`騎手名`), '') as `騎手名`,
    cast(nullif(trim(`負担重量`), '') as integer) as `負担重量`,
    nullif(trim(`見習い区分`), '') as `見習い区分`,
    nullif(trim(`調教師名`), '') as `調教師名`,
    nullif(trim(`調教師所属`), '') as `調教師所属`,
    nullif(trim(`他データリンク用キー_前走１競走成績キー`), '') as `他データリンク用キー_前走１競走成績キー`,
    nullif(trim(`他データリンク用キー_前走２競走成績キー`), '') as `他データリンク用キー_前走２競走成績キー`,
    nullif(trim(`他データリンク用キー_前走３競走成績キー`), '') as `他データリンク用キー_前走３競走成績キー`,
    nullif(trim(`他データリンク用キー_前走４競走成績キー`), '') as `他データリンク用キー_前走４競走成績キー`,
    nullif(trim(`他データリンク用キー_前走５競走成績キー`), '') as `他データリンク用キー_前走５競走成績キー`,
    nullif(trim(`他データリンク用キー_前走１レースキー`), '') as `他データリンク用キー_前走１レースキー`,
    nullif(trim(`他データリンク用キー_前走２レースキー`), '') as `他データリンク用キー_前走２レースキー`,
    nullif(trim(`他データリンク用キー_前走３レースキー`), '') as `他データリンク用キー_前走３レースキー`,
    nullif(trim(`他データリンク用キー_前走４レースキー`), '') as `他データリンク用キー_前走４レースキー`,
    nullif(trim(`他データリンク用キー_前走５レースキー`), '') as `他データリンク用キー_前走５レースキー`,
    cast(nullif(trim(`枠番`), '') as integer) as `枠番`,
    nullif(trim(`印コード_総合印`), '') as `印コード_総合印`,
    nullif(trim(`印コード_ＩＤＭ印`), '') as `印コード_ＩＤＭ印`,
    nullif(trim(`印コード_情報印`), '') as `印コード_情報印`,
    nullif(trim(`印コード_騎手印`), '') as `印コード_騎手印`,
    nullif(trim(`印コード_厩舎印`), '') as `印コード_厩舎印`,
    nullif(trim(`印コード_調教印`), '') as `印コード_調教印`,
    coalesce(cast(nullif(trim(`印コード_激走印`), '') as boolean), false) as `印コード_激走印`,
    nullif(trim(`芝適性コード`), '') as `芝適性コード`,
    nullif(trim(`ダ適性コード`), '') as `ダ適性コード`,
    nullif(trim(`騎手コード`), '') as `騎手コード`,
    nullif(trim(`調教師コード`), '') as `調教師コード`,
    cast(nullif(trim(`賞金情報_獲得賞金`), '') as integer) as `賞金情報_獲得賞金`,
    cast(nullif(trim(`賞金情報_収得賞金`), '') as integer) as `賞金情報_収得賞金`,
    nullif(trim(`賞金情報_条件クラス`), '') as `賞金情報_条件クラス`,
    cast(nullif(trim(`展開予想データ_テン指数`), '') as double) as `展開予想データ_テン指数`,
    cast(nullif(trim(`展開予想データ_ペース指数`), '') as double) as `展開予想データ_ペース指数`,
    cast(nullif(trim(`展開予想データ_上がり指数`), '') as double) as `展開予想データ_上がり指数`,
    cast(nullif(trim(`展開予想データ_位置指数`), '') as double) as `展開予想データ_位置指数`,
    case
      when nullif(trim(`展開予想データ_ペース予想`), '') in ('0','1') then 'S'
      when nullif(trim(`展開予想データ_ペース予想`), '') = '2' then 'M'
      when nullif(trim(`展開予想データ_ペース予想`), '') in ('3','4') then 'H'
      when nullif(trim(`展開予想データ_ペース予想`), '') in ('S','M','H') then nullif(trim(`展開予想データ_ペース予想`), '')
      else null
    end as `展開予想データ_ペース予想`,
    cast(nullif(trim(`展開予想データ_道中順位`), '') as integer) as `展開予想データ_道中順位`,
    cast(nullif(trim(`展開予想データ_道中差`), '') as integer) as `展開予想データ_道中差`,
    nullif(trim(`展開予想データ_道中内外`), '') as `展開予想データ_道中内外`,
    cast(nullif(trim(`展開予想データ_後３Ｆ順位`), '') as integer) as `展開予想データ_後３Ｆ順位`,
    cast(nullif(trim(`展開予想データ_後３Ｆ差`), '') as integer) as `展開予想データ_後３Ｆ差`,
    nullif(trim(`展開予想データ_後３Ｆ内外`), '') as `展開予想データ_後３Ｆ内外`,
    cast(nullif(trim(`展開予想データ_ゴール順位`), '') as integer) as `展開予想データ_ゴール順位`,
    cast(nullif(trim(`展開予想データ_ゴール差`), '') as integer) as `展開予想データ_ゴール差`,
    nullif(trim(`展開予想データ_ゴール内外`), '') as `展開予想データ_ゴール内外`,
    nullif(trim(`展開予想データ_展開記号`), '') as `展開予想データ_展開記号`,
    nullif(trim(`距離適性２`), '') as `距離適性２`,
    cast(coalesce(nullif(trim(`取消フラグ`), ''), '0') as boolean) as `取消フラグ`,
    nullif(trim(`性別コード`), '') as `性別コード`,
    nullif(trim(`馬主名`), '') as `馬主名`,
    nullif(trim(`馬主会コード`), '') as `馬主会コード`,
    nullif(trim(`馬記号コード`), '') as `馬記号コード`,
    cast(nullif(trim(`激走順位`), '') as integer) as `激走順位`,
    cast(nullif(trim(`LS指数順位`), '') as integer) as `LS指数順位`,
    cast(nullif(trim(`テン指数順位`), '') as integer) as `テン指数順位`,
    cast(nullif(trim(`ペース指数順位`), '') as integer) as `ペース指数順位`,
    cast(nullif(trim(`上がり指数順位`), '') as integer) as `上がり指数順位`,
    cast(nullif(trim(`位置指数順位`), '') as integer) as `位置指数順位`,
    cast(nullif(trim(`騎手期待単勝率`), '') as double) as `騎手期待単勝率`,
    cast(nullif(trim(`騎手期待３着内率`), '') as double) as `騎手期待３着内率`,
    coalesce(nullif(trim(`輸送区分`), ''), '0') as `輸送区分`,
    -- TODO
    -- case
    --   when substring(`体型`, 1, 1) in ('1', '2', '3') then substring(`体型`, 1, 1)
    --   when substring(`体型`, 1, 1) in ('4', '5') then '3'
    --   else null
    -- end `体型_全体`,
    -- case when substring(`体型`, 2, 1) in ('1', '2', '3') then substring(`体型`, 2, 1) else null end `体型_背中`,
    -- case when substring(`体型`, 3, 1) in ('1', '2', '3') then substring(`体型`, 3, 1) else null end `体型_胴`,
    -- case when substring(`体型`, 4, 1) in ('1', '2', '3') then substring(`体型`, 4, 1) else null end `体型_尻`,
    -- case when substring(`体型`, 5, 1) in ('1', '2', '3') then substring(`体型`, 5, 1) else null end `体型_トモ`,
    -- case when substring(`体型`, 6, 1) in ('1', '2', '3') then substring(`体型`, 6, 1) else null end `体型_腹袋`,
    -- case when substring(`体型`, 7, 1) in ('1', '2', '3') then substring(`体型`, 7, 1) else null end `体型_頭`,
    -- case when substring(`体型`, 8, 1) in ('1', '2', '3') then substring(`体型`, 8, 1) else null end `体型_首`,
    -- case when substring(`体型`, 9, 1) in ('1', '2', '3') then substring(`体型`, 9, 1) else null end `体型_胸`,
    -- case when substring(`体型`, 10, 1) in ('1', '2', '3') then substring(`体型`, 10, 1) else null end `体型_肩`,
    -- case when substring(`体型`, 11, 1) in ('1', '2', '3') then substring(`体型`, 11, 1) else null end `体型_前長`,
    -- case when substring(`体型`, 12, 1) in ('1', '2', '3') then substring(`体型`, 12, 1) else null end `体型_後長`,
    -- case when substring(`体型`, 13, 1) in ('1', '2', '3') then substring(`体型`, 13, 1) else null end `体型_前幅`,
    -- case when substring(`体型`, 14, 1) in ('1', '2', '3') then substring(`体型`, 14, 1) else null end `体型_後幅`,
    -- case when substring(`体型`, 15, 1) in ('1', '2', '3') then substring(`体型`, 15, 1) else null end `体型_前繋`,
    -- case when substring(`体型`, 16, 1) in ('1', '2', '3') then substring(`体型`, 16, 1) else null end `体型_後繋`,
    -- -- don't use 体型_尾 and 体型_振 fields because they are almost always null
    -- substring(`体型`, 17, 1) as `体型_尾`,
    -- substring(`体型`, 18, 1) as `体型_振`,
    -- substring(`体型`, 19, 1) as `体型_予備1`,
    -- substring(`体型`, 20, 1) as `体型_予備2`,
    -- substring(`体型`, 21, 1) as `体型_予備3`,
    -- substring(`体型`, 22, 1) as `体型_予備4`,
    -- substring(`体型`, 23, 1) as `体型_予備5`,
    -- substring(`体型`, 24, 1) as `体型_予備6`,
    -- substring(`体型`, 25, 1) as `体型_予備7`,
    -- substring(`体型`, 26, 1) as `体型_予備8`,
    -- -- このフィールドに z とか h が入っていたりする
    -- case when `体型総合１` in (SELECT code FROM {{ ref('jrdb__special_mention_codes') }}) then `体型総合１` else null end `体型総合１`,
    -- case when `体型総合２` in (SELECT code FROM {{ ref('jrdb__special_mention_codes') }}) then `体型総合２` else null end `体型総合２`,
    -- case when `体型総合３` in (SELECT code FROM {{ ref('jrdb__special_mention_codes') }}) then `体型総合３` else null end `体型総合３`,
    -- case when `馬特記１` in (SELECT code FROM {{ ref('jrdb__special_mention_codes') }}) then `馬特記１` else null end `馬特記１`,
    -- case when `馬特記２` in (SELECT code FROM {{ ref('jrdb__special_mention_codes') }}) then `馬特記２` else null end `馬特記２`,
    -- case when `馬特記３` in (SELECT code FROM {{ ref('jrdb__special_mention_codes') }}) then `馬特記３` else null end `馬特記３`,
    -- cast(nullif(trim(`展開参考データ_馬スタート指数`), '') as double) as `展開参考データ_馬スタート指数`,
    -- cast(nullif(trim(`展開参考データ_馬出遅率`), '') as double) as `展開参考データ_馬出遅率`,
    -- nullif(trim(`展開参考データ_参考前走`), '') as `展開参考データ_参考前走`,
    -- nullif(trim(`展開参考データ_参考前走騎手コード`), '') as `展開参考データ_参考前走騎手コード`,
    -- cast(nullif(trim(`万券指数`), '') as integer) as `万券指数`,
    -- nullif(trim(`万券印`), '') as `万券印`,
    -- nullif(trim(`降級フラグ`), '') as `降級フラグ`,
    -- nullif(trim(`激走タイプ`), '') as `激走タイプ`,
    -- nullif(trim(`休養理由分類コード`), '') as `休養理由分類コード`,
    -- case when substring(`フラグ`, 1, 1) in ('0', '1', '2') then substring(`フラグ`, 1, 1) else null end `芝ダ障害フラグ`,
    -- case when substring(`フラグ`, 2, 1) in ('0', '1') then substring(`フラグ`, 2, 1) else null end `距離フラグ`,
    -- case when substring(`フラグ`, 3, 1) in ('0', '1', '2', '3') then substring(`フラグ`, 3, 1) else null end `クラスフラグ`,
    -- case when substring(`フラグ`, 4, 1) in ('0', '1', '2', '3') then substring(`フラグ`, 4, 1) else null end `転厩フラグ`,
    -- case when substring(`フラグ`, 5, 1) in ('0', '1', '2', '3') then substring(`フラグ`, 5, 1) else null end `去勢フラグ`,
    -- case when substring(`フラグ`, 6, 1) in ('0', '1', '9') then substring(`フラグ`, 6, 1) else null end `乗替フラグ`,
    -- substring(`フラグ`, 7, 10) `予備フラグ`,
    -- cast(nullif(trim(`入厩何走目`), '') as integer) as `入厩何走目`,
    -- to_date(nullif(trim(`入厩年月日`), ''), 'yyyyMMdd') as `入厩年月日`,
    -- cast(nullif(trim(`入厩何日前`), '') as integer) as `入厩何日前`,
    -- nullif(trim(`放牧先`), '') as `放牧先`,
    -- nullif(trim(`放牧先ランク`), '') as `放牧先ランク`,
    -- nullif(trim(`厩舎ランク`), '') as `厩舎ランク`
    file_name as _file_name,
    sha256 as _sha256
  from
    source
)
select * from final
  